package com.liyafeng.video;

public class Live {


    /**
     * 推流 ，
     * 点播，
     * 直播，
     * 短视频，
     * 连麦（观众能看到别人1v1对话），
     * 1v1音视频通话
     * nvn视频聊天室（多人音视频通话/音视频通信（Real-Time Communication））
     *          腾讯云（最多8个？），
     *          声网（最多17个），网易云信，阿里云（最多16个）
     *          七牛云（不限）
     * ==========================
     * 任何视频从一端传到另一端播放，都需要编码-》传输/推流-》（转码/合并）-》拉流-》解码-》展示
     * 所以编解码规则，传输协议用的是哪个很关键
     *
     * 直播
     * 调制（模拟信号转换为数字信号 yuv/pcm）->编码（压缩数据，h264/ acc） ->封装 mp4/flv ->协议封装(rtmp /hls/http-flv) ->
     * 推送给服务端 与服务端建立对应的协议，建立连接，然后发送数据
     * 服务端收到数据后，如果这个时候有客户端建立拉流连接，就立即给客户端吧数据发过去。
     * 客户端收到数据，解协议，解封装，解码，解调，然后吧数字信号发送给物理设备，渲染图像，播放声音
     *
     *
     *
     * ======================直播========================
     *
     * Real-Time Messaging Protocol，实时消息传输协议
     * 搭建一个rtmp媒体服务器；
     * 推流端；
     * 拉流端。
     *
     * ==================点播===================
     * 频点播是二十世纪90年代在国外发展起来的，
     * 英文称为“Video on Demand”，所以也称为“VOD”
     * 就像现在的电视盒子都是点播，爱奇艺，优酷等看电影都是点播的方式
     * 和电视的实时播放时有区别的。
     *
     * ==================实时视频聊天============
     * WebRTC，名称源自网页即时通信（英语：Web Real-Time Communication）的缩写
     * 是一个支持网页浏览器进行实时语音对话或视频对话的API。
     *
     * 直播是从rtmp拉流的过程，而互动连麦是 音视频通话，是rtc框架
     * 而观众看连麦的过程是主播和连麦者的音视频数据在服务器合成为1道流后
     * 推送到cdn流媒体服务器。
     * @param args
     */
    public static void main(String[] args) {

    }


    /**
     *
     */
    public void f1(){

    }

    /**
     * 1对1语音视频通话
     * http://www.52im.net/thread-1201-1-1.html（微信语音视频通话）
     * http://www.52im.net/thread-1311-1-1.html(腾讯自研实时视频聊天框架)
     *
     *
     */
    public void f2(){}


    /**
     * ======直播播放逻辑=====
     * 　从网络上接收视频时首先要解协议（RTSP/RTMP/HTTP），然后是解格式（MKV，RMVB），之后才是将视频（H264）和音频（AAC）格式数据分别解码为图像（RGB/YUV）和声音（PCM），再根据时间戳同步播放。
     * 　
     * RTSP+RTP主要用于IPTV，原因是传输数据使用的是UDP，在网络环境比较稳定的情况下，传输效率是比较高的；
     * RTMP主要用于互联网音视频传输，它使用的是TCP传输，因为互联网环境相对较差，采用RTMP保证了视频的传输质量，但是其传输延迟相对较高，传输效率相对较低。
     */
    void a1(){}

    /**
     * ========rtmp========
     * https://zhuanlan.zhihu.com/p/48100533  RTMP、HTTP-FLV、HLS，你了解常见的三大直播协议吗
     * RTMP 是由 Adobe 公司提出的。RTMP 协议全称是 Real Time Messaging Protocol,即实时消息传送协议,用于在 Flash 平台之间传递视音频以及数据。
     *
     *
     * RTMP 协议传输的 FLV 封装格式支持的 H. 264 视频编码方式可以在很低的码率下显示质量还不错的画面,非常适合网络带宽不足的情况下收看流媒体。
     *
     * 工作在 TCP 之上的明文协议，默认使用端口 1935。协议中的基本数据单元成为消息（Message），
     * 传输的过程中消息会被拆分为更小的消息块（Chunk）单元。最后将分割后的消息块通过 TCP 协议传输，接收端再反解接收的消息块恢复成流媒体数据。
     *
     * ========使用的封装格式=====
     * 视频h264编码后，音频acc编码后，用 flv tag封装，然后封装成rtmp消息，发送
     *
     * flv封装格式设计出来的目的是为了用于网络传输使用的
     *
     * ======有优点===
     * Windows 的浏览器基本上都支持 Flash
     * 稳定性好，即 10 天多连续播放没有出现问题
     * 最后 RTMP 的延迟相对较低，一般延时在 1-3s 之间，一般的视频会议，互动式直播，完全是够用的。
     *
     * ======缺点=====
     * 当然 RTMP 并没有尽善尽美，它也有不足的地方。一方面是它是基于 TCP 传输，非公共端口，可能会被防火墙阻拦；
     * 另一方面，也是比较坑的一方面是 RTMP 为 Adobe 私有协议，很多设备无法播放，特别是在 iOS 端，需要使用第三方解码器才能播放。
     *
     *
     * =======衍生==
     * RTMP工作在TCP之上，默认使用端口1935，这个是基本形态；
     * RTMPE在RTMP的基础上增加了加密功能；
     * RTMPT封装在HTTP请求之上，可穿透防火墙；
     * RTMPS类似RTMPT，增加了TLS/SSL的安全功能；
     * RTMFP使用UDP进行传输的RTMP；
     *
     * =============librtmp====
     * librtmp是RTMP协议的实现，可以使用librtmp来实现协议的解析和数据的收发。直播服务器可以基于nginx+rtmp实现；
     * 直播客户端方面采用librtmp负责推流，FFmpeg负责编码；收看客户端采用VLC(一个视频播放器)即可，因为VLC本身既可以解析RTMP流，又可以解析编码后的视频数据。
     *
     * 
     *
     */
    public void a2(){}'


    /**
     * ==========hls=======
     * HLS 是由苹果公司提出的。HLS 全称是 HTTP Live Streaming,即基于 HTTP 的实时流式传输协议,
     * 可实现流媒体的直播和点播,主要应用在 iOS 系统, 为 iOS 设备( 如 iPhone、iPad) 提供音视频直播和点播方案。
     *
     * HLS 最大的不同在于它并不是一下请求完整的数据流。它会在服务器端将流媒体数据切割成连续的时长较短的 ts 小文件，
     * 并通过 M3U8 索引文件按序访问 ts 文件。客户端只要不停的按序播放从服务器获取到的文件，从而实现播放音视频。
     *
     * 相较 RTMP 而言，使用 HLS 在 HTML5 页面上实现播放非常简单：
     * <video src='xx.m3u8'/>
     *
     * =========HLS 的优势：
     *
     * Apple 的全系列产品支持：由于 HLS 是苹果提出的，所以在 Apple 的全系列产品包括 iPhone、 iPad、safari 都不需要安装任何插件就可以原生支持播放 HLS， 现在 Android 也加入了对 HLS 的支持。
     * 穿透防火墙。基于 HTTP/80 传输，有效避免防火墙拦截
     * 性能高。通过 HTTP 传输， 支持网络分发，CDN 支持良好，且自带多码率自适应，Apple 在提出 HLS 时，就已经考虑了码流自适应的问题。
     * =================HLS 的劣势：
     * 实时性差，延迟高。HLS 的延迟基本在 10s+ 以上
     * 文件碎片。特性的双刃剑，ts 切片较小，会造成海量小文件，对存储和缓存都有一定的挑战
     *
     *
     *
     *
     */
    public void a3(){}


    /**
     * =========http-flv======
     *
     *
     */
    void a3_1(){}

    /**
     * ====== 流分发 =========
     * 见live_cdn.jpg
     *
     * RTMP 协议为流媒体而设计，在推流中用的比较多，同时大多 CDN 厂商支持RTMP 协议。
     * HTTP-FLV 使用类似 RTMP流式的 HTTP 长连接，需由特定流媒体服务器分发的，兼顾两者的优点。以及可以复用现有 HTTP 分发资源的流式协议。
     * 它的实时性和 RTMP 相等，与 RTMP 相比又省去了部分协议交互时间，首屏时间更短，可拓展的功能也更多。
     *
     *
     *
     */
    void a4(){}
}
